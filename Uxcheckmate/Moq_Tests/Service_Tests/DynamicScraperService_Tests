using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Moq;
using NUnit.Framework;
using Microsoft.Playwright;
using Uxcheckmate_Main.Models;
using Uxcheckmate_Main.Services;

namespace Services_Tests
{
    [TestFixture]
    public class DynamicScraperServiceTests
    {
        private Mock<IPlaywrightService> _mockPlaywrightService;
        private Mock<IBrowserContext> _mockContext;
        private Mock<IPage> _mockPage;
        private Mock<ILogger<DynamicScraperService>> _mockLogger;
        private DynamicScraperService _service;

        [SetUp]
        public void Setup()
        {
            _mockPlaywrightService = new Mock<IPlaywrightService>();
            _mockContext = new Mock<IBrowserContext>();
            _mockPage = new Mock<IPage>();
            _mockLogger = new Mock<ILogger<DynamicScraperService>>();

            _mockContext.Setup(c => c.NewPageAsync()).ReturnsAsync(_mockPage.Object);
            _mockPlaywrightService.Setup(s => s.GetBrowserContextAsync()).ReturnsAsync(_mockContext.Object);

            _service = new DynamicScraperService(_mockPlaywrightService.Object, _mockLogger.Object);
        }

        [Test]
        public async Task ScrapeAsync_ReturnsExpectedDynamics()
        {
            // Arrange
            var url = "https://example.com";

            _mockPage.Setup(p => p.GotoAsync(It.IsAny<string>(), It.IsAny<PageGotoOptions>()))
                .Returns(Task.CompletedTask);

            _mockPage.Setup(p => p.AddScriptTagAsync(It.IsAny<PageAddScriptTagOptions>()))
                .Returns(Task.CompletedTask);

            _mockPage.Setup(p => p.EvalOnSelectorAllAsync<string[]>("style", It.IsAny<string>()))
                .ReturnsAsync(new[] { "body { color: red; }" });

            _mockPage.Setup(p => p.EvalOnSelectorAllAsync<string[]>("link[rel='stylesheet']", It.IsAny<string>()))
                .ReturnsAsync(new[] { "https://example.com/style.css" });

            _mockPage.Setup(p => p.EvalOnSelectorAllAsync<string[]>("script:not([src])", It.IsAny<string>()))
                .ReturnsAsync(new[] { "console.log('inline js');" });

            _mockPage.Setup(p => p.EvalOnSelectorAllAsync<string[]>("script[src]", It.IsAny<string>()))
                .ReturnsAsync(new[] { "https://example.com/script.js" });

            _mockPage.Setup(p => p.EvaluateAsync<string[]>("() => window.scrapeExternalCss()"))
                .ReturnsAsync(new[] { "body { background: #fff; }" });

            _mockPage.Setup(p => p.EvaluateAsync<string[]>("() => window.scrapeExternalJs()"))
                .ReturnsAsync(new[] { "function test() {}" });

            _mockPage.Setup(p => p.CloseAsync()).Returns(Task.CompletedTask);
            _mockContext.Setup(c => c.CloseAsync()).Returns(Task.CompletedTask);

            // Act
            var result = await _service.ScrapeAsync(url);

            // Assert
            Assert.Multiple(() =>
            {
                Assert.That(result.Url, Is.EqualTo(url));
                Assert.That(result.InlineCss, Has.One.EqualTo("body { color: red; }"));
                Assert.That(result.ExternalCssLinks, Has.One.EqualTo("https://example.com/style.css"));
                Assert.That(result.ExternalCssContents, Has.One.EqualTo("body { background: #fff; }"));
                Assert.That(result.InlineJs, Has.One.EqualTo("console.log('inline js');"));
                Assert.That(result.ExternalJsLinks, Has.One.EqualTo("https://example.com/script.js"));
                Assert.That(result.ExternalJsContents, Has.One.EqualTo("function test() {}"));
            });
        }
    }
}
