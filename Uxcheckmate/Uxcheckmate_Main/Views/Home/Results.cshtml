@model Uxcheckmate_Main.Models.Report

@*
============================================================================================
                        HEADER (Screenshot, URL, #of issues)
============================================================================================
*@

<div class="container">
    <div class="row headerRow">
        <div class="col-md-6">
            <img src="" alt="">
        </div>
        <div class="col-md-6">
            <h1 id="reportHeader">@Model.Url</h1>
            <p id="totalIssues">Total Issues Found: @(@Model.DesignIssues.Count() + @Model.AccessibilityIssues.Count()) </p>
        </div> 
    </div>
</div>

<br>

<div id="reportContainer">
    <select id="sortSelect" class="form-select mb-4">
        <option value="category" selected="@(ViewBag.CurrentSort == "category")">Category</option>
        <option value="severity-high-low" selected="@(ViewBag.CurrentSort == "severity-high-low")">Severity (High to Low)</option>
        <option value="severity-low-high" selected="@(ViewBag.CurrentSort == "severity-low-high")">Severity (Low to High)</option>
    </select>

@*
============================================================================================
                                    Design Issues
============================================================================================
*@
    <div class="report-section mb-5">
        <h3 class="section-header mb-4">Design Issues</h3>
        <div id="designIssuesContainer">
            @await Html.PartialAsync("_DesignIssuesPartial", Model.DesignIssues)
        </div>
    </div>

@*
============================================================================================
                                Accessibility Issues
============================================================================================
*@

    <div class="report-section mb-5">
        <h3 class="section-header mb-4">Accessibility Issues</h3>
        <div id="accessibilityIssuesContainer">
            @await Html.PartialAsync("_AccessibilityIssuesPartial", Model.AccessibilityIssues)
        </div>
    </div>

    <a asp-action="DownloadReport" asp-route-id="@Model.Id" class="btn btn-primary">
        Download PDF Report
    </a>
</div>

@section Scripts {
    <script>
        document.getElementById('sortSelect').addEventListener('change', function() {
            const sortOrder = this.value;
            
            fetch(`/Home/GetSortedIssues?id=@Model.Id&sortOrder=${sortOrder}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('designIssuesContainer').innerHTML = data.designHtml;
                    document.getElementById('accessibilityIssuesContainer').innerHTML = data.accessibilityHtml;
                    initBootstrapCollapses();
                });
        });

        function initBootstrapCollapses() {
            // Initialize all accordions
            document.querySelectorAll('.accordion').forEach(accordion => {
                const collapses = accordion.querySelectorAll('.accordion-collapse');
                
                collapses.forEach(collapse => {
                    // Create new Collapse instance with proper parent
                    new bootstrap.Collapse(collapse, {
                        toggle: false,
                        parent: accordion
                    });
                });

                // Add click handlers for proper toggle behavior
                accordion.querySelectorAll('.accordion-button').forEach(button => {
                    button.addEventListener('click', function() {
                        const target = document.querySelector(this.dataset.bsTarget);
                        const collapse = bootstrap.Collapse.getInstance(target) || new bootstrap.Collapse(target);
                        
                        if (target.classList.contains('show')) {
                            collapse.hide();
                        } else {
                            // Hide others in the same accordion
                            collapses.forEach(c => {
                                if (c !== target) bootstrap.Collapse.getInstance(c)?.hide();
                            });
                            collapse.show();
                        }
                    });
                });
            });
        }
        
        // Initial initialization
        initBootstrapCollapses();
    </script>
}

